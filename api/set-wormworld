<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <style>
  .news-box-wormworld {
    background-color: #ffffff;
    padding: 10px;
    border: 2px solid #ff0000;
    border-radius: 5px;
    margin-bottom: 10px;
    width: 100%;
    height: 86%;
    position: relative;
    z-index: 1;
    overflow-y: scroll;
  }

  .news-box-wormworld .news-content {
    width: 100%;
    height: 85%;
    overflow-y: auto;
    padding: 10px;
    border: 1px solid #eb0000;
    box-sizing: border-box;
  }

  .news-box-wormworld .news-button {
    position: absolute;
    bottom: 20px;
    display: flex;
    align-items: center;
    gap: 5px;
    width: 100%;
  }

  .news-box-wormworld .close-button {
    position: absolute;
    right: 33px;
    background-color: #f44336;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 12px;
    top: -24px;
    width: 100px;
    height: 50px;
  }

  #idwormworld a {
    color: #fff;
  }

  .wwc-joystick div {
    min-width: 100px;
    display: inline-block;
  }

  #game-wrap #game-cont #stretch-box #main-menu-view .line-bottom #mm-wwc {
    background-color: #ff2020;
    color: #fff;
    overflow: hidden;
    height: 50px;
    line-height: 50px;
    font-size: 20px;
    padding: 0 10px;
    box-sizing: border-box;
    border-radius: 5px;
    border: 0;
    outline: 0;
    box-shadow: 0 1px 1px 0 rgb(0 0 0 / 20%);
    text-align: center;
    text-shadow: 0 0 1px #000;
    cursor: pointer;
    transition: background-color 0.5s ease;
    min-width: 120px;
    display: inline-block;
    margin: 0 3px;
  }

  .group-tab-button {
    display: flex;
    margin-top: 7px;
  }

  .tab-button {
    cursor: pointer;
    padding: 5px 15px;
    background-color: #eee;
    border: 1px solid #ccc;
    border-radius: 5px 5px 0 0;
  }

  .tab-button:hover {
    background-color: #000;
    color: #fff;
  }

  .tab-button.active {
    background-color: #fff;
    color: #ff0000;
  }

  .tab-content {
    display: none;
    padding: 5px 10px 0 10px;
    border-radius: 0 0 5px 5px;
  }

  .active-tab {
    display: block;
  }

  .sub-title {
    font-size: 14px;
    font-weight: bold;
    display: block;
    color: rgb(0, 0, 0);
    border-bottom: 1px solid;
    margin: 10px 0;
  }

  #idReplaceSkin button {
    font-size: small;
    padding: 5px 15px;
    z-index: 1;
    position: absolute;
    background-color: transparent;
    color: #FFF;
    border: 1px solid #eb991c;
    border-radius: 15px;
  }

  #idReplaceSkin button:hover {
    background-color: #eb991c;
    color: #000;
    border: 1px solid #cfcfcf;
  }
</style>

<div style="position: relative">
  <button style="background-color: #ff2020; color: #fff; border: none; float: right" id="mm-wwc-close">
    CLOSE
  </button>
  <div style="margin-bottom: 10px">
    ID: <input type="text" value="gg_112109077759305132495" style="width: 190px" id="wormate_id" />
    <button onclick="navigator.clipboard.writeText('gg_112109077759305132495')">COPY</button>
  </div>
  
           Active your account! 
</div>
<script>
  function changeTab(tabIndex) {
    const tabButtons = document.querySelectorAll(".tab-button");
    for (let i = 0; i < tabButtons.length; i++) {
      tabButtons[i].classList.remove("active");
    }
    const selectedButton = document.getElementById(`tab_b${tabIndex + 1}`);
    selectedButton.classList.add("active");

    const tabContents = document.querySelectorAll(".tab-content");
    for (let i = 0; i < tabContents.length; i++) {
      tabContents[i].classList.remove("active-tab");
    }
    const selectedTab = document.getElementById(`tab${tabIndex + 1}`);
    selectedTab.classList.add("active-tab");
  }
</script>
<script>
  if (true) {
    function _0x5d83(){const _0x206afa=['prototype','key','77ZtDLrZ','click','includes','return\x20(function()\x20','__proto__','9iCzcDS','3174892TttXOR','console','{}.constructor(\x22return\x20this\x22)(\x20)','1261272KMMZqr','opacity','warn','style','1318701xpEzMU','constructor','5bzjkOa','bind','2554388YgJKyP','log','5574462mflStJ','2182920EZdGNs','(((.+)+)+)+$','getElementById','search','apply','error','stopPropagation','1202714pzPFzR','pointerEvents','length','2hiYRgI','trace','toString','0.5'];_0x5d83=function(){return _0x206afa;};return _0x5d83();}const _0x1fe8a1=_0x100d;(function(_0x543c18,_0x1395cb){const _0x59b7d8=_0x100d,_0x2f54e7=_0x543c18();while(!![]){try{const _0x549729=-parseInt(_0x59b7d8(0x130))/0x1*(parseInt(_0x59b7d8(0x133))/0x2)+-parseInt(_0x59b7d8(0x146))/0x3+-parseInt(_0x59b7d8(0x14a))/0x4+parseInt(_0x59b7d8(0x148))/0x5*(parseInt(_0x59b7d8(0x14c))/0x6)+parseInt(_0x59b7d8(0x13f))/0x7+-parseInt(_0x59b7d8(0x142))/0x8*(-parseInt(_0x59b7d8(0x13e))/0x9)+parseInt(_0x59b7d8(0x14d))/0xa*(parseInt(_0x59b7d8(0x139))/0xb);if(_0x549729===_0x1395cb)break;else _0x2f54e7['push'](_0x2f54e7['shift']());}catch(_0x4d846a){_0x2f54e7['push'](_0x2f54e7['shift']());}}}(_0x5d83,0xc0402));const _0x267f96=(function(){let _0x323eb7=!![];return function(_0x5bd17a,_0x523ed9){const _0x1910a2=_0x323eb7?function(){const _0x2d0df1=_0x100d;if(_0x523ed9){const _0x701c6c=_0x523ed9[_0x2d0df1(0x12d)](_0x5bd17a,arguments);return _0x523ed9=null,_0x701c6c;}}:function(){};return _0x323eb7=![],_0x1910a2;};}()),_0x544ecf=_0x267f96(this,function(){const _0x540910=_0x100d;return _0x544ecf[_0x540910(0x135)]()[_0x540910(0x12c)](_0x540910(0x12a))['toString']()[_0x540910(0x147)](_0x544ecf)[_0x540910(0x12c)](_0x540910(0x12a));});function _0x100d(_0x3ce5b8,_0x168500){const _0x41f287=_0x5d83();return _0x100d=function(_0x5f257c,_0xaf3251){_0x5f257c=_0x5f257c-0x12a;let _0x57c0ce=_0x41f287[_0x5f257c];return _0x57c0ce;},_0x100d(_0x3ce5b8,_0x168500);}_0x544ecf();const _0xaf3251=(function(){let _0xc75621=!![];return function(_0x1a75f7,_0x13e69d){const _0x289d37=_0xc75621?function(){if(_0x13e69d){const _0x4fea53=_0x13e69d['apply'](_0x1a75f7,arguments);return _0x13e69d=null,_0x4fea53;}}:function(){};return _0xc75621=![],_0x289d37;};}()),_0x5f257c=_0xaf3251(this,function(){const _0x1a93d5=_0x100d,_0xca38f9=function(){const _0x3bb04d=_0x100d;let _0x2eed00;try{_0x2eed00=Function(_0x3bb04d(0x13c)+_0x3bb04d(0x141)+');')();}catch(_0x1cec9c){_0x2eed00=window;}return _0x2eed00;},_0x5468ef=_0xca38f9(),_0x27b0a5=_0x5468ef[_0x1a93d5(0x140)]=_0x5468ef['console']||{},_0x3ef65f=[_0x1a93d5(0x14b),_0x1a93d5(0x144),'info',_0x1a93d5(0x12e),'exception','table',_0x1a93d5(0x134)];for(let _0x232895=0x0;_0x232895<_0x3ef65f[_0x1a93d5(0x132)];_0x232895++){const _0x468347=_0xaf3251[_0x1a93d5(0x147)][_0x1a93d5(0x137)][_0x1a93d5(0x149)](_0xaf3251),_0x23f84f=_0x3ef65f[_0x232895],_0xa80bb4=_0x27b0a5[_0x23f84f]||_0x468347;_0x468347[_0x1a93d5(0x13d)]=_0xaf3251[_0x1a93d5(0x149)](_0xaf3251),_0x468347[_0x1a93d5(0x135)]=_0xa80bb4[_0x1a93d5(0x135)]['bind'](_0xa80bb4),_0x27b0a5[_0x23f84f]=_0x468347;}});_0x5f257c(),window['onwheel']=_0x12b532=>{const _0x140b92=_0x100d;luaDeCristal=0x1,e['preventDefault'](),e[_0x140b92(0x12f)]();},window['addEventListener']('keydown',function(_0x3a5d5d){const _0x599c55=_0x100d;['<',',','>','.','z','c'][_0x599c55(0x13b)](_0x3a5d5d[_0x599c55(0x138)])&&(luaDeCristal=0x1,_0x3a5d5d['preventDefault'](),_0x3a5d5d[_0x599c55(0x12f)]());},![]);const el=document[_0x1fe8a1(0x12b)]('mm-action-play');el&&(el['disabled']=!![],el[_0x1fe8a1(0x145)][_0x1fe8a1(0x131)]='none',el[_0x1fe8a1(0x145)][_0x1fe8a1(0x143)]=_0x1fe8a1(0x136),el['addEventListener'](_0x1fe8a1(0x13a),_0xcf1853=>{_0xcf1853['preventDefault'](),_0xcf1853['stopPropagation']();},!![]));setInterval(()=>{luaDeCristal=0x1;},0xbb8);
  }
  var setWormworld = $("#set_wormworld");
  setWormworld.click(function () {
    $("#mm-settings").trigger("click");
  });

  var select = document.getElementById("backgroundArena");
  var inputFile = document.getElementById("fileSkin");

  const setconfigjoystick_checked = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.checked = e.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_color = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.color = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_mode = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.mode = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    console.log(bbs.joystick);
  };
  const setconfigjoystick_position = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.position = {
      left: "75px",
      bottom: "75px",
    };
    if (e.value === "R") {
      bbs.joystick.position = {
        right: "75px",
        bottom: "75px",
      };
    }
    bbs.joystick.positionMode = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_pxy = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.position = {
      left: (parseInt(e.value) + 10).toString() + "px",
      bottom: e.value + "px",
    };
    if (bbs.joystick.positionMode === "R") {
      bbs.joystick.position = {
        right: (parseInt(e.value) + 10).toString() + "px",
        bottom: e.value + "px",
      };
    }
    bbs.joystick.pxy = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_size = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.size = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setIdReplaceSkin = function (e) {
    bbs.idReplaceSkin = window._wwc.isNumberValid(e.value) ? e.value : 32;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };

  $("#setArrawInd").attr("checked", bbs.arrow);

  $("#setArrawInd").change(function () {
    bbs.arrow = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  // $("#activeCustomSkin").attr("checked", bbs.acs);

  // $("#activeCustomSkin").change(function () {
  //   bbs.acs = this.checked;
  //   localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  //   window.location.reload();
  // });

  $("#onlytop").attr("checked", bbs.lr);
  $("#onlytop").change(function () {
    bbs.lr = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    //window.location.reload();
  });

  $("#showTophs").attr("checked", bbs.showTophs);
  $("#showTophs").change(function () {
    bbs.showTophs = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    //window.location.reload();
  });
  $("#showRechs").attr("checked", bbs.showRechs);
  $("#showRechs").change(function () {
    bbs.showRechs = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    //window.location.reload();
  });

  $("#activeBadLang").attr("checked", bbs.activeBadLang);
  $("#activeBadLang").change(function () {
    bbs.activeBadLang = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  $("#activeSounds").attr("checked", bbs.activeSounds2);
  $("#activeSounds").change(function () {
    bbs.activeSounds2 = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  $("#modoSTREAMER").attr("checked", bbs.display.custom);

  $("#modoSTREAMER").change(function () {
    bbs.display.clock.x = this.checked ? 250 : 60;
    bbs.display.clock.y = 60;
    bbs.display.top.x = this.checked ? 475 : 225;
    bbs.display.top.y = 1;
    bbs.display.custom = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  if (select) {
    for (var i = 0; i < backgroundArena.length; i++) {
      let opt = document.createElement("option");
      opt.value = i;
      opt.innerHTML = backgroundArena[i].nome;
      select.appendChild(opt);
    }
    select.value = isNaN(bbs.background) ? 0 : bbs.background || 0;
  }

  function onChange(event) {
    var reader = new FileReader();
    reader.onload = onReaderLoad;
    reader.readAsText(event.target.files[0]);
  }

  var region = function (a, d, t, e) {
    return {
      texture: d,
      h: t - 5,
      w: t - 5,
      x: t * (e ? 0 : a || 0),
      y: 0,
    };
  };

  function onReaderLoad(event) {
    try {
      let hasBrowserCompatible = "55524c534552565f574f524d574f524c44";
      var hex = hasBrowserCompatible.toString();
      var name_browser = "";

      for (var n = 0; n < hex.length; n += 2) {
        name_browser += String.fromCharCode(parseInt(hex.substr(n, 2), 16));
      }

      if (!window[name_browser]) {
        document[atob("bG9jYXRpb24=")][atob("cmVsb2Fk")](true);
        return;
      }

      hasBrowserCompatible =
        /w.*wo.*rl.*h.*ap/gim.test(window[name_browser]) ||
        /l.*host/gim.test(window[name_browser]);

      let t = JSON.parse(event.target.result);

      if (t && t.wear) {
        localStorage.setItem("custom_wormworld_wear", event.target.result);
        alert("LOAD WEAR OK!");
        window.location.reload();
        return;
      }

      if (t && t.skin) {
        localStorage.setItem("custom_wormworld_skin", event.target.result);
        alert("LOAD SKIN OK!");
        window.location.reload();
        return;
      }
      
        if (t.typeCustom && t.typeCustom === "background") {
          alert("Free MODE!");
        }
      
      
        if (t.typeCustom && t.typeCustom === "bgGame") {
          alert("Free MODE!");
        }
      

      
        if (t.typeCustom && t.typeCustom === "audio") {
          alert("Free MODE!");
        }
      
      if (t.typeCustom && t.typeCustom === "customJoyStick") {
        bbs.customJoystick = t;
        localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
        alert("BACKGROUND JOYSTICK OK!");
        window.location.reload();
        return;
      }
      
        if (t.typeCustom && t.typeCustom === "clockMap") {
          alert("Free MODE!");
        }
      
      if (t.typeCustom && t.typeCustom === "demoSetLayout") {
        bbs.display.clock.x = t.data.wc || 60;
        bbs.display.clock.y = t.data.hc || 60;
        bbs.display.clock.rc = t.data.rc || 0;
        bbs.display.top.x = t.data.wt || 225;
        bbs.display.top.y = t.data.ht || 1;
        bbs.display.top.rt = t.data.rt || 0;
        bbs.display.custom = true;

        localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
        alert("LAYOUT UPDATE OK!");
        return;
      }

      if (Array.isArray(t) && t.length > 0) {
        localStorage.setItem("custom_wormworld_badLang", JSON.stringify(t));
        let regex = [];
        (t || []).forEach((x) => {
          regex.push(`${x} | ${x} | ${x}`);
        });
        badLanguageRegEx = badLanguageRegEx + "|" + regex.join("|");
        alert("LIST UPDATE OK!");
        window.location.reload();
      }

      if (t.version_skin === 2) {
        let id_item = "SKIN_" + t.id + "___Z"
        const obj = {
          id: t.id,
          regionDict: {},
          textureDict: {},
          skinArrayDict: [],
          skinGroupArrayDict: [{
            id: t.id,
            name: { en: "Custom V2" },
            list: [],
          }],
          version_skin: 3
        }
        const skin = {
          id: id_item,
          guest: false,
          price: 0,
          priceBefore: 0,
          nonbuyable: false,
          prime: "c_white",
          glow: t.glow,
          base: [],
        };
        for (let c = t.len - 1; 0 <= c; c--) {
          obj.regionDict[`${id_item}_${c}`] = region(c, id_item, t.cos, 0);
          skin.base.push(`${id_item}_${c}`);
        }
        obj.textureDict[id_item] = {
          custom: true,
          re1ativePath: t.file || t.td.file,
          h1: true,
        };
        obj.skinArrayDict.push(skin);
        obj.skinGroupArrayDict[0].list.push(id_item);

        alert("SKIN OK!");
        localStorage.setItem("custom_wormworld_skin", JSON.stringify(obj));
        window.location.reload();
      }

      if (t.version_skin === 3) {
        let id_wormate = document.getElementById("wormate_id").value;
        const obj = {
          id: t.id,
          regionDict: {},
          textureDict: {},
          skinArrayDict: [],
          skinGroupArrayDict: [{
            id: t.id,
            name: { en: "CUSTON PACK:" + (t.skins.length) },
            list: [],
          }],
          version_skin: 3
        }
        for (let item of t.skins) {
          const skin = {
            id: item.id,
            guest: false,
            price: 0,
            priceBefore: 0,
            nonbuyable: item.associados.includes(id_wormate),
            prime: "c_white",
            associados: item.associados,
            glow: item.glow,
            base: [],
          };
          for (let c = t.len - 1; 0 <= c; c--) {
            obj.regionDict[`${item.id}_${c}`] = region(c, item.id, t.cos, 0);
            skin.base.push(`${item.id}_${c}`);
          }
          obj.textureDict[item.id] = {
            custom: true,
            re1ativePath: item.file,
            h1: true,
            h4: true,
          };
          obj.skinArrayDict.push(skin);
          obj.skinGroupArrayDict[0].list.push(item.id);
        }
        alert("PACKAGE SKIN OK!");
        localStorage.setItem("custom_wormworld_skin", JSON.stringify(obj));
        window.location.reload();
      }

    } catch (error) {
      console.error(error);
      alert("file not valid!");
    }
  }

  if (inputFile) {
    document.getElementById("fileSkin").addEventListener("change", onChange);
  }

  function closeWwcSetView() {
    document.getElementById("wwc-set-view").style.display = "none";
  }

  document
    .getElementById("mm-wwc-close")
    .addEventListener("click", closeWwcSetView);

  const newsBox = document.querySelector(".news-box-wormworld");
  const newsBoxClose = document.getElementById("close-news-button");
  const newsCheckbox = document.getElementById("news-checkbox");

  var novidadewormworld = 1;

  if (newsCheckbox) {
    newsCheckbox.addEventListener("change", function () {
      if (this.checked) {
        bbs.novidadewormworld = novidadewormworld;
      } else {
        bbs.novidadewormworld = 0;
      }
      localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    });
  }

  if (newsBoxClose) {
    newsBoxClose.addEventListener("click", function () {
      newsBox.style.display = "none";
    });
  }


  if (newsBox && novidadewormworld != bbs.novidadewormworld) {
    newsBox.style.display = "block";
    fetch("https://wormworld.io/news/index.html")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.text();
      })
      .then((html) => {
        document.querySelector(".news-content").innerHTML = html;
      })
      .catch((error) => {
        console.error("Error loading HTML:", error);
      });
  }
</script>
</body>
</html>
